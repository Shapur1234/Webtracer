// This file contains autogenerated texture static objects from images contained in the ./resources/textures directory

use std::sync::Arc;
use std::fmt;
use serde::{Deserialize, Serialize};
use lazy_static::lazy_static;
use crate::image::ImageData;

#[allow(dead_code)]
#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]
pub enum ImageID {
    Jupiter,
    Brick,
    Rust,
    Sun,
    Earth,
    Mars,
}

impl fmt::Display for ImageID {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

pub fn get_const_image(image: ImageID) -> Arc<ImageData> {
    match image {
        ImageID::Jupiter => {
            lazy_static! { static ref JUPITER: Arc<ImageData> = Arc::new(ImageData::new(ImageID::Jupiter, 1920, (*include_bytes!(".jupiter.bin")).into())); }
            JUPITER.clone()
        }
        ImageID::Brick => {
            lazy_static! { static ref BRICK: Arc<ImageData> = Arc::new(ImageData::new(ImageID::Brick, 1920, (*include_bytes!(".brick.bin")).into())); }
            BRICK.clone()
        }
        ImageID::Rust => {
            lazy_static! { static ref RUST: Arc<ImageData> = Arc::new(ImageData::new(ImageID::Rust, 1920, (*include_bytes!(".rust.bin")).into())); }
            RUST.clone()
        }
        ImageID::Sun => {
            lazy_static! { static ref SUN: Arc<ImageData> = Arc::new(ImageData::new(ImageID::Sun, 1920, (*include_bytes!(".sun.bin")).into())); }
            SUN.clone()
        }
        ImageID::Earth => {
            lazy_static! { static ref EARTH: Arc<ImageData> = Arc::new(ImageData::new(ImageID::Earth, 1920, (*include_bytes!(".earth.bin")).into())); }
            EARTH.clone()
        }
        ImageID::Mars => {
            lazy_static! { static ref MARS: Arc<ImageData> = Arc::new(ImageData::new(ImageID::Mars, 1920, (*include_bytes!(".mars.bin")).into())); }
            MARS.clone()
        }
    }
}
